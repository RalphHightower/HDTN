diff --git a/config_files/inducts/bpsink_one_tcpcl_port4558.json b/config_files/inducts/bpsink_one_tcpcl_port4558.json
index b5d52ede..fb2ae641 100644
--- a/config_files/inducts/bpsink_one_tcpcl_port4558.json
+++ b/config_files/inducts/bpsink_one_tcpcl_port4558.json
@@ -3,12 +3,16 @@
     "inductVector": [
         {
             "name": "tcpcl_bpsink",
-            "convergenceLayer": "tcpcl_v3",
+            "convergenceLayer": "tcpcl_v4",
             "boundPort": 4558,
             "numRxCircularBufferElements": 200,
             "numRxCircularBufferBytesPerElement": 20000,
             "keepAliveIntervalSeconds": 15,
-            "tcpclV3MyMaxTxSegmentSizeBytes": 100000000
+            "tcpclV4MyMaxRxSegmentSizeBytes": 200000,
+            "tlsIsRequired": false,
+            "certificatePemFile": "",
+            "privateKeyPemFile": "",
+            "diffieHellmanParametersPemFile": ""
         }
     ]
 }
diff --git a/config_files/outducts/bpgen_one_tcpclv4_port4556.json b/config_files/outducts/bpgen_one_tcpclv4_port4556.json
index bc46cac8..c6fe9211 100644
--- a/config_files/outducts/bpgen_one_tcpclv4_port4556.json
+++ b/config_files/outducts/bpgen_one_tcpclv4_port4556.json
@@ -15,7 +15,7 @@
                 "ipn:3.*"
             ],
             "keepAliveIntervalSeconds": 17,
-            "tcpclAllowOpportunisticReceiveBundles": false,
+            "tcpclAllowOpportunisticReceiveBundles": true,
             "tcpclV4MyMaxRxSegmentSizeBytes": 200000,
             "tryUseTls": false,
             "tlsIsRequired": false,
diff --git a/tests/test_scripts_linux/TCPCL_2Nodes_Test/README.md b/tests/test_scripts_linux/TCPCL_2Nodes_Test/README.md
new file mode 100644
index 00000000..33051622
--- /dev/null
+++ b/tests/test_scripts_linux/TCPCL_2Nodes_Test/README.md
@@ -0,0 +1,13 @@
+# TCPCL\_2Nodes\_Test
+* Tests the connection ability using TCPCL withn the HDTN protocol
+
+## How to use
+* Within the "receiver" container, run ./runscript\_receiverr\_tcpcl.sh
+* Then wait about 3 seconds
+* When you are done waiting for 3 seconds, within the "sender" container run ./runscript\_sender\_tcpcl.sh
+* Wait about 10 seconds for the sender and receiver programs to initialize and operate
+* You can then use tcpdump to observe the network traffic from:
+    * the sender container
+    * the receiver container
+    * the host machine running the container
+* Running tcpdump on these different locations will show a different perspective on network traffic which many beneficial for your testing
diff --git a/tests/test_scripts_linux/TCPCL_2Nodes_Test/runscript_receiver_tcpcl.sh b/tests/test_scripts_linux/TCPCL_2Nodes_Test/runscript_receiver_tcpcl.sh
index 30e031a0..180e1cb3 100755
--- a/tests/test_scripts_linux/TCPCL_2Nodes_Test/runscript_receiver_tcpcl.sh
+++ b/tests/test_scripts_linux/TCPCL_2Nodes_Test/runscript_receiver_tcpcl.sh
@@ -3,7 +3,7 @@
 # path variables
 config_files=$HDTN_SOURCE_ROOT/config_files
 hdtn_config=$config_files/hdtn/hdtn_Node2_tcpcl.json
-sink_config=$config_files/inducts/bpsink_one_tcpcl_port4558_2NodesTest.json
+sink_config=$config_files/inducts/bpsink_one_tcpcl_port4558.json
 
 cd $HDTN_SOURCE_ROOT
 
diff --git a/tests/test_scripts_linux/TCPCL_2Nodes_Test/runscript_sender_tcpcl.sh b/tests/test_scripts_linux/TCPCL_2Nodes_Test/runscript_sender_tcpcl.sh
index ecc862eb..803d12b4 100755
--- a/tests/test_scripts_linux/TCPCL_2Nodes_Test/runscript_sender_tcpcl.sh
+++ b/tests/test_scripts_linux/TCPCL_2Nodes_Test/runscript_sender_tcpcl.sh
@@ -3,7 +3,7 @@
 # path variables
 config_files=$HDTN_SOURCE_ROOT/config_files
 hdtn_config=$config_files/hdtn/hdtn_Node1_tcpcl.json
-gen_config=$config_files/outducts/bpgen_one_stcp_port4556_2NodesTest.json
+gen_config=$config_files/outducts/bpgen_one_tcpclv4_port4556.json
 
 cd $HDTN_SOURCE_ROOT
 
diff --git a/tests/test_scripts_linux/lcrd_file_transfer_test/README.md b/tests/test_scripts_linux/lcrd_file_transfer_test/README.md
new file mode 100644
index 00000000..bfe0d9b3
--- /dev/null
+++ b/tests/test_scripts_linux/lcrd_file_transfer_test/README.md
@@ -0,0 +1,20 @@
+# File Transfer Test
+* Tests the ability to send a file using HDTN
+* This test supports sending files using LTP and TCPCL
+
+## How to use
+* Open the "sender" and "receiver" directories as per your respective container
+* For the sender container, make a folder titled "flightdata" and put all of the files you want to send over to the receiver within this folder. Once the test is over, a folder called "received" will be created on the receiver side of the application
+* Once you have put all the files you want to be transfered, you are now ready to start the receiver script
+    * run ./start\_ltp\_receive.sh for the ltp test
+    * run ./start\_tcpcl\_receive.sh for the tcpcl test
+* Wait for about 3 seconds
+* The start the corrisponding sender script
+    * run ./start\_ltp\_send.sh for the ltp test
+    * run ./start\_tcpcl\_send.sh for the tcpcl test
+* Wait about 10 seconds for the sender and receiver programs to initialize and operate
+* You can then use tcpdump to observe the network traffic from:
+    * the sender container
+    * the receiver container
+    * the host machine running the container
+* Running tcpdump on these different locations will show a different perspective on network traffic which many beneficial for your testing
diff --git a/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/rcv_files b/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/rcv_files
index dfe7fb82..d0818bf7 100755
--- a/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/rcv_files
+++ b/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/rcv_files
@@ -1 +1 @@
-$HDTN_SOURCE_ROOT/build/common/bpcodec/apps/bpreceivefile --save-directory=./received --my-uri-eid=ipn:2.1 --inducts-config-file=./receiver_bpsink_stcp.json
+$HDTN_SOURCE_ROOT/build/common/bpcodec/apps/bpreceivefile --save-directory=./received --my-uri-eid=ipn:2.1 --inducts-config-file=./receiver_bpsink_tcpcl.json
diff --git a/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/receiver_bpsink_tcpcl.json b/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/receiver_bpsink_tcpcl.json
new file mode 100644
index 00000000..48c43e14
--- /dev/null
+++ b/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/receiver_bpsink_tcpcl.json
@@ -0,0 +1,18 @@
+{
+    "inductConfigName": "myconfig",
+    "inductVector": [
+        {
+            "name": "tcpcl_bpsink",
+            "convergenceLayer": "tcpcl_v4",
+            "boundPort": 4558,
+            "numRxCircularBufferElements": 100,
+            "numRxCircularBufferBytesPerElement": 20000,
+            "keepAliveIntervalSeconds": 15,
+            "tcpclV4MyMaxRxSegmentSizeBytes": 200000,
+            "tlsIsRequired": false,
+            "certificatePemFile": "",
+            "privateKeyPemFile": "",
+            "diffieHellmanParametersPemFile": ""
+        }
+    ]
+}
\ No newline at end of file
diff --git a/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/receiver_hdtn_config_tcpcl.json b/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/receiver_hdtn_config_tcpcl.json
new file mode 100644
index 00000000..a0be9725
--- /dev/null
+++ b/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/receiver_hdtn_config_tcpcl.json
@@ -0,0 +1,81 @@
+{
+    "hdtnConfigName": "my hdtn config",
+    "userInterfaceOn": true,
+    "mySchemeName": "unused_scheme_name",
+    "myNodeId": 20,
+    "myBpEchoServiceId": 2047,
+    "myCustodialSsp": "unused_custodial_ssp",
+    "myCustodialServiceId": 0,
+    "mySchedulerServiceId": 100,
+    "isAcsAware": true,
+    "acsMaxFillsPerAcsPacket": 100,
+    "acsSendPeriodMilliseconds": 1000,
+    "retransmitBundleAfterNoCustodySignalMilliseconds": 10000,
+    "maxBundleSizeBytes": 10000000,
+    "maxIngressBundleWaitOnEgressMilliseconds": 2000,
+    "bufferRxToStorageOnLinkUpSaturation": false,
+    "maxLtpReceiveUdpPacketSizeBytes": 1500,
+    "zmqBoundSchedulerPubSubPortPath": 10200,
+    "zmqBoundTelemApiPortPath": 10305,
+    "inductsConfig": {
+        "inductConfigName": "myconfig",
+        "inductVector": [
+            {
+                "name": "tcpcl_ingress",
+                "convergenceLayer": "tcpcl_v4",
+                "boundPort": 1113,
+                "numRxCircularBufferElements": 100,
+                "numRxCircularBufferBytesPerElement": 20000,
+                "keepAliveIntervalSeconds": 15,
+                "tcpclV4MyMaxRxSegmentSizeBytes": 200000,
+                "tlsIsRequired": false,
+                "certificatePemFile": "",
+                "privateKeyPemFile": "",
+                "diffieHellmanParametersPemFile": ""
+            }
+        ]
+    },
+    "outductsConfig": {
+        "outductConfigName": "myconfig",
+        "outductVector": [
+            {
+                "name": "tcpcl_egress",
+                "convergenceLayer": "tcpcl_v4",
+                "nextHopNodeId": 2,
+                "remoteHostname": "localhost",
+                "remotePort": 4558,
+                "maxNumberOfBundlesInPipeline": 50,
+                "maxSumOfBundleBytesInPipeline": 50000000,
+                "finalDestinationEidUris": [
+                    "ipn:2.*"
+                ],
+                "keepAliveIntervalSeconds": 17,
+                "tcpclAllowOpportunisticReceiveBundles": true,
+                "tcpclV4MyMaxRxSegmentSizeBytes": 200000,
+                "tryUseTls": false,
+                "tlsIsRequired": false,
+                "useTlsVersion1_3": false,
+                "doX509CertificateVerification": false,
+                "verifySubjectAltNameInX509Certificate": false,
+                "certificationAuthorityPemFileForVerification": ""
+            }
+        ]
+    },
+    "storageConfig": {
+        "storageImplementation": "asio_single_threaded",
+        "tryToRestoreFromDisk": false,
+        "autoDeleteFilesOnExit": true,
+        "totalStorageCapacityBytes": 8192000000,
+        "storageDeletionPolicy" : "never",
+        "storageDiskConfigVector": [
+            {
+                "name": "d1",
+                "storeFilePath": ".\/store1.bin"
+            },
+            {
+                "name": "d2",
+                "storeFilePath": ".\/store2.bin"
+            }
+        ]
+    }
+}
\ No newline at end of file
diff --git a/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/run_hdtn_oneprocess_tcpcl b/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/run_hdtn_oneprocess_tcpcl
new file mode 100644
index 00000000..c0afe2f5
--- /dev/null
+++ b/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/run_hdtn_oneprocess_tcpcl
@@ -0,0 +1 @@
+$HDTN_SOURCE_ROOT/build/module/hdtn_one_process/hdtn-one-process --hdtn-config-file=./receiver_hdtn_config_tcpcl.json --contact-plan-file=contactPlanLcrd.json
diff --git a/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/start_tcpcl_receive.sh b/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/start_tcpcl_receive.sh
new file mode 100644
index 00000000..ad7a992b
--- /dev/null
+++ b/tests/test_scripts_linux/lcrd_file_transfer_test/receiver/start_tcpcl_receive.sh
@@ -0,0 +1,83 @@
+#!/bin/bash
+
+
+NAME="HDTN_RECEIVER"
+DEST="HDTN_SENDER"
+#get timestamp for logs
+TIME=$(date "+%Y.%m.%d-%H.%M.%S")
+
+
+#get custody type (none = 0, old = 1, new = 2)
+CUSTODY=0
+
+while [[ $# -gt 0 ]]; do
+  case "$1" in
+    -c)
+      if [[ $2 -eq 0 ]]; then
+              CUSTODY=0
+      else
+              if (( $2 >= 0 && $1 <=2 )); then
+                      CUSTODY="$2"
+              else
+                      CUSTODY=0
+              fi
+      fi
+      shift
+      shift
+      ;;
+    *)
+      echo "Unknown argument $1 - use"
+      echo "./$0"
+      echo "./$0 0"
+      echo "./$0 1"
+      exit
+      ;;
+  esac
+done
+
+#kill existing HDTN
+./kill.sh
+
+mkdir received
+mkdir checksums
+
+if (( CUSTODY == 0 )); then
+        CL="LTP_NO_CUSTODY"
+
+        ./run_hdtn_oneprocess_tcpcl &
+	sleep 6
+
+	echo "Receive"
+	./rcv_files  &
+
+	./wait.sh
+	echo "Done"
+	echo "Starting checksums"
+
+	./sha.sh ./received/ 
+
+	rm -rf ./received/*
+	echo "Test done"
+
+else
+	CL="LTP_CUSTODY"
+
+	echo "Exiting, cannot do a tcpcl custody transfer yet"
+	exit
+    ./run_hdtn_oneprocess_ltp_custody  &
+	sleep 6
+
+	echo "Receive"
+	./rcv_files_custody
+	
+	./wait.sh
+	echo "Done"
+	echo "Starting checksums"
+	
+	./sha.sh ./received/
+
+	rm -rf ./received/*
+
+	echo "Test done"
+
+fi
diff --git a/tests/test_scripts_linux/lcrd_file_transfer_test/sender/flightdata/test.txt b/tests/test_scripts_linux/lcrd_file_transfer_test/sender/flightdata/test.txt
new file mode 100644
index 00000000..27b0b28f
--- /dev/null
+++ b/tests/test_scripts_linux/lcrd_file_transfer_test/sender/flightdata/test.txt
@@ -0,0 +1 @@
+Hello, this is a test documents which will be sent over to the receiver
diff --git a/tests/test_scripts_linux/lcrd_file_transfer_test/sender/run_hdtn_oneprocess_tcpcl b/tests/test_scripts_linux/lcrd_file_transfer_test/sender/run_hdtn_oneprocess_tcpcl
new file mode 100644
index 00000000..971583d8
--- /dev/null
+++ b/tests/test_scripts_linux/lcrd_file_transfer_test/sender/run_hdtn_oneprocess_tcpcl
@@ -0,0 +1 @@
+$HDTN_SOURCE_ROOT/build/module/hdtn_one_process/hdtn-one-process --hdtn-config-file=./sender_hdtn_config_tcpcl.json --contact-plan-file=contactPlanLcrd.json
diff --git a/tests/test_scripts_linux/lcrd_file_transfer_test/sender/send_files b/tests/test_scripts_linux/lcrd_file_transfer_test/sender/send_files
index 30d8e4a3..01e65ec3 100755
--- a/tests/test_scripts_linux/lcrd_file_transfer_test/sender/send_files
+++ b/tests/test_scripts_linux/lcrd_file_transfer_test/sender/send_files
@@ -1 +1 @@
-$HDTN_SOURCE_ROOT/build/common/bpcodec/apps/bpsendfile --max-bundle-size-bytes=500000 --file-or-folder-path=./flightdata --my-uri-eid=ipn:1.1 --dest-uri-eid=ipn:2.1 --outducts-config-file=./sender_bpgen_stcp.json
+$HDTN_SOURCE_ROOT/build/common/bpcodec/apps/bpsendfile --max-bundle-size-bytes=500000 --file-or-folder-path=./flightdata --my-uri-eid=ipn:1.1 --dest-uri-eid=ipn:2.1 --outducts-config-file=./sender_bpgen_tcpcl.json
\ No newline at end of file
diff --git a/tests/test_scripts_linux/lcrd_file_transfer_test/sender/sender_bpgen_tcpcl.json b/tests/test_scripts_linux/lcrd_file_transfer_test/sender/sender_bpgen_tcpcl.json
new file mode 100644
index 00000000..debc1b93
--- /dev/null
+++ b/tests/test_scripts_linux/lcrd_file_transfer_test/sender/sender_bpgen_tcpcl.json
@@ -0,0 +1,27 @@
+{
+    "outductConfigName": "myconfig",
+    "outductVector": [
+        {
+            "name": "bpgen",
+            "convergenceLayer": "tcpcl_v4",
+            "nextHopNodeId": 10,
+            "remoteHostname": "localhost",
+            "remotePort": 4556,
+            "maxNumberOfBundlesInPipeline": 50,
+            "maxSumOfBundleBytesInPipeline": 50000000,
+            "finalDestinationEidUris": [
+                "ipn:2.*"
+            ],
+        "tcpclAllowOpportunisticReceiveBundles": true,
+        "tcpclV4MyMaxRxSegmentSizeBytes": 200000,
+        "keepAliveIntervalSeconds": 17,
+        "tryUseTls": false,
+        "tlsIsRequired": false,
+        "useTlsVersion1_3": false,
+        "doX509CertificateVerification": false,
+        "verifySubjectAltNameInX509Certificate": false,
+        "certificationAuthorityPemFileForVerification": ""
+
+        }
+    ]
+}
\ No newline at end of file
diff --git a/tests/test_scripts_linux/lcrd_file_transfer_test/sender/sender_hdtn_config_tcpcl.json b/tests/test_scripts_linux/lcrd_file_transfer_test/sender/sender_hdtn_config_tcpcl.json
new file mode 100644
index 00000000..3fd3078e
--- /dev/null
+++ b/tests/test_scripts_linux/lcrd_file_transfer_test/sender/sender_hdtn_config_tcpcl.json
@@ -0,0 +1,81 @@
+{
+    "hdtnConfigName": "my hdtn config",
+    "userInterfaceOn": true,
+    "mySchemeName": "unused_scheme_name",
+    "myNodeId": 10,
+    "myBpEchoServiceId": 2047,
+    "myCustodialSsp": "unused_custodial_ssp",
+    "myCustodialServiceId": 0,
+    "mySchedulerServiceId": 100,
+    "isAcsAware": true,
+    "acsMaxFillsPerAcsPacket": 100,
+    "acsSendPeriodMilliseconds": 1000,
+    "retransmitBundleAfterNoCustodySignalMilliseconds": 10000,
+    "maxBundleSizeBytes": 10000000,
+    "maxIngressBundleWaitOnEgressMilliseconds": 2000,
+    "bufferRxToStorageOnLinkUpSaturation": false,
+    "maxLtpReceiveUdpPacketSizeBytes": 1500,
+    "zmqBoundSchedulerPubSubPortPath": 10200,
+    "zmqBoundTelemApiPortPath": 10305,
+    "inductsConfig": {
+        "inductConfigName": "myconfig",
+        "inductVector": [
+            {
+                "name": "tcpcl_ingress",
+                "convergenceLayer": "tcpcl_v4",
+                "boundPort": 4556,
+                "numRxCircularBufferElements": 100,
+                "numRxCircularBufferBytesPerElement": 20000,
+                "keepAliveIntervalSeconds": 15,
+                "tcpclV4MyMaxRxSegmentSizeBytes": 200000,
+                "tlsIsRequired": false,
+                "certificatePemFile": "",
+                "privateKeyPemFile": "",
+                "diffieHellmanParametersPemFile": ""
+            }
+        ]
+    },
+    "outductsConfig": {
+        "outductConfigName": "myconfig",
+        "outductVector": [
+            {
+                "name": "tcpcl_egress",
+                "convergenceLayer": "tcpcl_v4",
+                "nextHopNodeId": 20,
+                "remoteHostname": "hdtn_receiver",
+                "remotePort": 1113,
+                "maxNumberOfBundlesInPipeline": 50,
+                "maxSumOfBundleBytesInPipeline": 50000000,
+                "finalDestinationEidUris": [
+                    "ipn:2.*"
+                ],
+                "keepAliveIntervalSeconds": 17,
+                "tcpclAllowOpportunisticReceiveBundles": true,
+                "tcpclV4MyMaxRxSegmentSizeBytes": 200000,
+                "tryUseTls": false,
+                "tlsIsRequired": false,
+                "useTlsVersion1_3": false,
+                "doX509CertificateVerification": false,
+                "verifySubjectAltNameInX509Certificate": false,
+                "certificationAuthorityPemFileForVerification": ""
+            }
+        ]
+    },
+    "storageConfig": {
+        "storageImplementation": "asio_single_threaded",
+        "tryToRestoreFromDisk": false,
+        "autoDeleteFilesOnExit": true,
+        "totalStorageCapacityBytes": 8192000000,
+        "storageDeletionPolicy" : "never",
+        "storageDiskConfigVector": [
+            {
+                "name": "d1",
+                "storeFilePath": ".\/store1.bin"
+            },
+            {
+                "name": "d2",
+                "storeFilePath": ".\/store2.bin"
+            }
+        ]
+    }
+}
\ No newline at end of file
diff --git a/tests/test_scripts_linux/lcrd_file_transfer_test/sender/start_tcpcl_send.sh b/tests/test_scripts_linux/lcrd_file_transfer_test/sender/start_tcpcl_send.sh
new file mode 100644
index 00000000..643ba52b
--- /dev/null
+++ b/tests/test_scripts_linux/lcrd_file_transfer_test/sender/start_tcpcl_send.sh
@@ -0,0 +1,59 @@
+#!/bin/bash
+
+NAME="HDTN_SENDER"
+DEST="HDTN_RECEIVER"
+#get timestamp for logs
+TIME=$(date "+%Y.%m.%d-%H.%M.%S")
+
+
+#get custody type (none = 0, old = 1, new = 2)
+CUSTODY=0
+
+while [[ $# -gt 0 ]]; do
+  case "$1" in
+    -c)
+      if [[ $2 -eq 0 ]]; then
+	      CUSTODY=0
+      else
+	      if (( $2 >= 0 && $2 <=1 )); then
+		      CUSTODY="$2"
+	      else
+		      CUSTODY=0
+	      fi
+      fi
+      shift
+      shift
+      ;;
+    *)
+      echo "Unknown argument $1 - use"
+      echo "./$0"
+      echo "./$0 0"
+      echo "./$0 1"
+      exit
+      ;;
+  esac
+done
+
+#kill existing HDTN
+./kill.sh
+
+
+if (( CUSTODY == 0 )); then
+	CL="LTP_NO_CUSTODY"
+
+	./run_hdtn_oneprocess_tcpcl &
+	sleep 6
+	./send_files
+
+
+else
+	CL="LTP_CUSTODY"
+	echo "There is currently no proess for sending files with custody for tcpcl"
+	exit
+	./run_hdtn_oneprocess_ltp_custody &
+	sleep 6
+	./send_files_custody
+
+fi
+
+

